// Code generated by MockGen. DO NOT EDIT.
// Source: ../../pkg/security/types.go
//
// Generated by this command:
//
//	mockgen -package=security -source ../../pkg/security/types.go -destination ../../pkg/security/mocks.go
//

// Package security is a generated GoMock package.
package security

import (
	reflect "reflect"

	gin "github.com/gin-gonic/gin"
	gomock "go.uber.org/mock/gomock"
	context "golang.org/x/net/context"
)

// MockPrincipalManager is a mock of PrincipalManager interface.
type MockPrincipalManager struct {
	ctrl     *gomock.Controller
	recorder *MockPrincipalManagerMockRecorder
}

// MockPrincipalManagerMockRecorder is the mock recorder for MockPrincipalManager.
type MockPrincipalManagerMockRecorder struct {
	mock *MockPrincipalManager
}

// NewMockPrincipalManager creates a new mock instance.
func NewMockPrincipalManager(ctrl *gomock.Controller) *MockPrincipalManager {
	mock := &MockPrincipalManager{ctrl: ctrl}
	mock.recorder = &MockPrincipalManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPrincipalManager) EXPECT() *MockPrincipalManagerMockRecorder {
	return m.recorder
}

// ChangePassword mocks base method.
func (m *MockPrincipalManager) ChangePassword(ctx context.Context, username, password string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangePassword", ctx, username, password)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChangePassword indicates an expected call of ChangePassword.
func (mr *MockPrincipalManagerMockRecorder) ChangePassword(ctx, username, password any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangePassword", reflect.TypeOf((*MockPrincipalManager)(nil).ChangePassword), ctx, username, password)
}

// Create mocks base method.
func (m *MockPrincipalManager) Create(ctx context.Context, principal *Principal) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, principal)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockPrincipalManagerMockRecorder) Create(ctx, principal any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockPrincipalManager)(nil).Create), ctx, principal)
}

// Delete mocks base method.
func (m *MockPrincipalManager) Delete(ctx context.Context, username string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, username)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockPrincipalManagerMockRecorder) Delete(ctx, username any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockPrincipalManager)(nil).Delete), ctx, username)
}

// Exists mocks base method.
func (m *MockPrincipalManager) Exists(ctx context.Context, username string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists", ctx, username)
	ret0, _ := ret[0].(error)
	return ret0
}

// Exists indicates an expected call of Exists.
func (mr *MockPrincipalManagerMockRecorder) Exists(ctx, username any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockPrincipalManager)(nil).Exists), ctx, username)
}

// Find mocks base method.
func (m *MockPrincipalManager) Find(ctx context.Context, username string) (*Principal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", ctx, username)
	ret0, _ := ret[0].(*Principal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockPrincipalManagerMockRecorder) Find(ctx, username any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockPrincipalManager)(nil).Find), ctx, username)
}

// Update mocks base method.
func (m *MockPrincipalManager) Update(ctx context.Context, principal *Principal) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, principal)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockPrincipalManagerMockRecorder) Update(ctx, principal any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockPrincipalManager)(nil).Update), ctx, principal)
}

// VerifyResource mocks base method.
func (m *MockPrincipalManager) VerifyResource(ctx context.Context, username, resource string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyResource", ctx, username, resource)
	ret0, _ := ret[0].(error)
	return ret0
}

// VerifyResource indicates an expected call of VerifyResource.
func (mr *MockPrincipalManagerMockRecorder) VerifyResource(ctx, username, resource any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyResource", reflect.TypeOf((*MockPrincipalManager)(nil).VerifyResource), ctx, username, resource)
}

// MockAuthenticationEndpoint is a mock of AuthenticationEndpoint interface.
type MockAuthenticationEndpoint struct {
	ctrl     *gomock.Controller
	recorder *MockAuthenticationEndpointMockRecorder
}

// MockAuthenticationEndpointMockRecorder is the mock recorder for MockAuthenticationEndpoint.
type MockAuthenticationEndpointMockRecorder struct {
	mock *MockAuthenticationEndpoint
}

// NewMockAuthenticationEndpoint creates a new mock instance.
func NewMockAuthenticationEndpoint(ctrl *gomock.Controller) *MockAuthenticationEndpoint {
	mock := &MockAuthenticationEndpoint{ctrl: ctrl}
	mock.recorder = &MockAuthenticationEndpointMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthenticationEndpoint) EXPECT() *MockAuthenticationEndpointMockRecorder {
	return m.recorder
}

// Authenticate mocks base method.
func (m *MockAuthenticationEndpoint) Authenticate(ctx *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Authenticate", ctx)
}

// Authenticate indicates an expected call of Authenticate.
func (mr *MockAuthenticationEndpointMockRecorder) Authenticate(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Authenticate", reflect.TypeOf((*MockAuthenticationEndpoint)(nil).Authenticate), ctx)
}

// MockAuthenticationService is a mock of AuthenticationService interface.
type MockAuthenticationService struct {
	ctrl     *gomock.Controller
	recorder *MockAuthenticationServiceMockRecorder
}

// MockAuthenticationServiceMockRecorder is the mock recorder for MockAuthenticationService.
type MockAuthenticationServiceMockRecorder struct {
	mock *MockAuthenticationService
}

// NewMockAuthenticationService creates a new mock instance.
func NewMockAuthenticationService(ctrl *gomock.Controller) *MockAuthenticationService {
	mock := &MockAuthenticationService{ctrl: ctrl}
	mock.recorder = &MockAuthenticationServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthenticationService) EXPECT() *MockAuthenticationServiceMockRecorder {
	return m.recorder
}

// Authenticate mocks base method.
func (m *MockAuthenticationService) Authenticate(ctx context.Context, principal *Principal) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Authenticate", ctx, principal)
	ret0, _ := ret[0].(error)
	return ret0
}

// Authenticate indicates an expected call of Authenticate.
func (mr *MockAuthenticationServiceMockRecorder) Authenticate(ctx, principal any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Authenticate", reflect.TypeOf((*MockAuthenticationService)(nil).Authenticate), ctx, principal)
}

// Validate mocks base method.
func (m *MockAuthenticationService) Validate(principal *Principal) []error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Validate", principal)
	ret0, _ := ret[0].([]error)
	return ret0
}

// Validate indicates an expected call of Validate.
func (mr *MockAuthenticationServiceMockRecorder) Validate(principal any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validate", reflect.TypeOf((*MockAuthenticationService)(nil).Validate), principal)
}

// MockAuthorizationFilter is a mock of AuthorizationFilter interface.
type MockAuthorizationFilter struct {
	ctrl     *gomock.Controller
	recorder *MockAuthorizationFilterMockRecorder
}

// MockAuthorizationFilterMockRecorder is the mock recorder for MockAuthorizationFilter.
type MockAuthorizationFilterMockRecorder struct {
	mock *MockAuthorizationFilter
}

// NewMockAuthorizationFilter creates a new mock instance.
func NewMockAuthorizationFilter(ctrl *gomock.Controller) *MockAuthorizationFilter {
	mock := &MockAuthorizationFilter{ctrl: ctrl}
	mock.recorder = &MockAuthorizationFilterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthorizationFilter) EXPECT() *MockAuthorizationFilterMockRecorder {
	return m.recorder
}

// Authorize mocks base method.
func (m *MockAuthorizationFilter) Authorize(ctx *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Authorize", ctx)
}

// Authorize indicates an expected call of Authorize.
func (mr *MockAuthorizationFilterMockRecorder) Authorize(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Authorize", reflect.TypeOf((*MockAuthorizationFilter)(nil).Authorize), ctx)
}

// MockAuthorizationService is a mock of AuthorizationService interface.
type MockAuthorizationService struct {
	ctrl     *gomock.Controller
	recorder *MockAuthorizationServiceMockRecorder
}

// MockAuthorizationServiceMockRecorder is the mock recorder for MockAuthorizationService.
type MockAuthorizationServiceMockRecorder struct {
	mock *MockAuthorizationService
}

// NewMockAuthorizationService creates a new mock instance.
func NewMockAuthorizationService(ctrl *gomock.Controller) *MockAuthorizationService {
	mock := &MockAuthorizationService{ctrl: ctrl}
	mock.recorder = &MockAuthorizationServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthorizationService) EXPECT() *MockAuthorizationServiceMockRecorder {
	return m.recorder
}

// Authorize mocks base method.
func (m *MockAuthorizationService) Authorize(ctx context.Context, tokenString string) (*Principal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Authorize", ctx, tokenString)
	ret0, _ := ret[0].(*Principal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Authorize indicates an expected call of Authorize.
func (mr *MockAuthorizationServiceMockRecorder) Authorize(ctx, tokenString any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Authorize", reflect.TypeOf((*MockAuthorizationService)(nil).Authorize), ctx, tokenString)
}

// MockTokenManager is a mock of TokenManager interface.
type MockTokenManager struct {
	ctrl     *gomock.Controller
	recorder *MockTokenManagerMockRecorder
}

// MockTokenManagerMockRecorder is the mock recorder for MockTokenManager.
type MockTokenManagerMockRecorder struct {
	mock *MockTokenManager
}

// NewMockTokenManager creates a new mock instance.
func NewMockTokenManager(ctrl *gomock.Controller) *MockTokenManager {
	mock := &MockTokenManager{ctrl: ctrl}
	mock.recorder = &MockTokenManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTokenManager) EXPECT() *MockTokenManagerMockRecorder {
	return m.recorder
}

// Generate mocks base method.
func (m *MockTokenManager) Generate(principal *Principal) (*string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Generate", principal)
	ret0, _ := ret[0].(*string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Generate indicates an expected call of Generate.
func (mr *MockTokenManagerMockRecorder) Generate(principal any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Generate", reflect.TypeOf((*MockTokenManager)(nil).Generate), principal)
}

// Validate mocks base method.
func (m *MockTokenManager) Validate(tokenString string) (*Principal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Validate", tokenString)
	ret0, _ := ret[0].(*Principal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Validate indicates an expected call of Validate.
func (mr *MockTokenManagerMockRecorder) Validate(tokenString any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validate", reflect.TypeOf((*MockTokenManager)(nil).Validate), tokenString)
}

// MockPasswordEncoder is a mock of PasswordEncoder interface.
type MockPasswordEncoder struct {
	ctrl     *gomock.Controller
	recorder *MockPasswordEncoderMockRecorder
}

// MockPasswordEncoderMockRecorder is the mock recorder for MockPasswordEncoder.
type MockPasswordEncoderMockRecorder struct {
	mock *MockPasswordEncoder
}

// NewMockPasswordEncoder creates a new mock instance.
func NewMockPasswordEncoder(ctrl *gomock.Controller) *MockPasswordEncoder {
	mock := &MockPasswordEncoder{ctrl: ctrl}
	mock.recorder = &MockPasswordEncoderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPasswordEncoder) EXPECT() *MockPasswordEncoderMockRecorder {
	return m.recorder
}

// Encode mocks base method.
func (m *MockPasswordEncoder) Encode(rawPassword string) (*string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Encode", rawPassword)
	ret0, _ := ret[0].(*string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Encode indicates an expected call of Encode.
func (mr *MockPasswordEncoderMockRecorder) Encode(rawPassword any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Encode", reflect.TypeOf((*MockPasswordEncoder)(nil).Encode), rawPassword)
}

// Matches mocks base method.
func (m *MockPasswordEncoder) Matches(encodedPassword, rawPassword string) (*bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Matches", encodedPassword, rawPassword)
	ret0, _ := ret[0].(*bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Matches indicates an expected call of Matches.
func (mr *MockPasswordEncoderMockRecorder) Matches(encodedPassword, rawPassword any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Matches", reflect.TypeOf((*MockPasswordEncoder)(nil).Matches), encodedPassword, rawPassword)
}

// UpgradeEncoding mocks base method.
func (m *MockPasswordEncoder) UpgradeEncoding(encodedPassword string) (*bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpgradeEncoding", encodedPassword)
	ret0, _ := ret[0].(*bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpgradeEncoding indicates an expected call of UpgradeEncoding.
func (mr *MockPasswordEncoderMockRecorder) UpgradeEncoding(encodedPassword any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpgradeEncoding", reflect.TypeOf((*MockPasswordEncoder)(nil).UpgradeEncoding), encodedPassword)
}

// MockPasswordGenerator is a mock of PasswordGenerator interface.
type MockPasswordGenerator struct {
	ctrl     *gomock.Controller
	recorder *MockPasswordGeneratorMockRecorder
}

// MockPasswordGeneratorMockRecorder is the mock recorder for MockPasswordGenerator.
type MockPasswordGeneratorMockRecorder struct {
	mock *MockPasswordGenerator
}

// NewMockPasswordGenerator creates a new mock instance.
func NewMockPasswordGenerator(ctrl *gomock.Controller) *MockPasswordGenerator {
	mock := &MockPasswordGenerator{ctrl: ctrl}
	mock.recorder = &MockPasswordGeneratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPasswordGenerator) EXPECT() *MockPasswordGeneratorMockRecorder {
	return m.recorder
}

// Generate mocks base method.
func (m *MockPasswordGenerator) Generate() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Generate")
	ret0, _ := ret[0].(string)
	return ret0
}

// Generate indicates an expected call of Generate.
func (mr *MockPasswordGeneratorMockRecorder) Generate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Generate", reflect.TypeOf((*MockPasswordGenerator)(nil).Generate))
}

// Validate mocks base method.
func (m *MockPasswordGenerator) Validate(rawPassword string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Validate", rawPassword)
	ret0, _ := ret[0].(error)
	return ret0
}

// Validate indicates an expected call of Validate.
func (mr *MockPasswordGeneratorMockRecorder) Validate(rawPassword any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validate", reflect.TypeOf((*MockPasswordGenerator)(nil).Validate), rawPassword)
}

// MockPasswordManager is a mock of PasswordManager interface.
type MockPasswordManager struct {
	ctrl     *gomock.Controller
	recorder *MockPasswordManagerMockRecorder
}

// MockPasswordManagerMockRecorder is the mock recorder for MockPasswordManager.
type MockPasswordManagerMockRecorder struct {
	mock *MockPasswordManager
}

// NewMockPasswordManager creates a new mock instance.
func NewMockPasswordManager(ctrl *gomock.Controller) *MockPasswordManager {
	mock := &MockPasswordManager{ctrl: ctrl}
	mock.recorder = &MockPasswordManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPasswordManager) EXPECT() *MockPasswordManagerMockRecorder {
	return m.recorder
}

// Encode mocks base method.
func (m *MockPasswordManager) Encode(rawPassword string) (*string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Encode", rawPassword)
	ret0, _ := ret[0].(*string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Encode indicates an expected call of Encode.
func (mr *MockPasswordManagerMockRecorder) Encode(rawPassword any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Encode", reflect.TypeOf((*MockPasswordManager)(nil).Encode), rawPassword)
}

// Generate mocks base method.
func (m *MockPasswordManager) Generate() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Generate")
	ret0, _ := ret[0].(string)
	return ret0
}

// Generate indicates an expected call of Generate.
func (mr *MockPasswordManagerMockRecorder) Generate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Generate", reflect.TypeOf((*MockPasswordManager)(nil).Generate))
}

// Matches mocks base method.
func (m *MockPasswordManager) Matches(encodedPassword, rawPassword string) (*bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Matches", encodedPassword, rawPassword)
	ret0, _ := ret[0].(*bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Matches indicates an expected call of Matches.
func (mr *MockPasswordManagerMockRecorder) Matches(encodedPassword, rawPassword any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Matches", reflect.TypeOf((*MockPasswordManager)(nil).Matches), encodedPassword, rawPassword)
}

// UpgradeEncoding mocks base method.
func (m *MockPasswordManager) UpgradeEncoding(encodedPassword string) (*bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpgradeEncoding", encodedPassword)
	ret0, _ := ret[0].(*bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpgradeEncoding indicates an expected call of UpgradeEncoding.
func (mr *MockPasswordManagerMockRecorder) UpgradeEncoding(encodedPassword any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpgradeEncoding", reflect.TypeOf((*MockPasswordManager)(nil).UpgradeEncoding), encodedPassword)
}

// Validate mocks base method.
func (m *MockPasswordManager) Validate(rawPassword string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Validate", rawPassword)
	ret0, _ := ret[0].(error)
	return ret0
}

// Validate indicates an expected call of Validate.
func (mr *MockPasswordManagerMockRecorder) Validate(rawPassword any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validate", reflect.TypeOf((*MockPasswordManager)(nil).Validate), rawPassword)
}
