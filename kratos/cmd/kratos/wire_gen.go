// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"git.codesubmit.io/stena-group/golang-engineer-udolyj/kratos/internal/providers"
	"git.codesubmit.io/stena-group/golang-engineer-udolyj/kratos/internal/server"
	"git.codesubmit.io/stena-group/golang-engineer-udolyj/pkg/config"
	"git.codesubmit.io/stena-group/golang-engineer-udolyj/pkg/log"
	"github.com/go-kratos/kratos/v2"
)

import (
	_ "go.uber.org/automaxprocs"
)

// Injectors from wire.go:

// wireApp init kratos application.
func wireApp(cfg *config.Config, logger log.Logger) (*kratos.App, error) {
	passwordEncoder := providers.ProvidePasswordEncoder()
	passwordGenerator := providers.ProvidePasswordGenerator()
	passwordManager := providers.ProvidePasswordManager(passwordEncoder, passwordGenerator)
	datasourceContext := providers.ProvideDatasourceContext(cfg)
	loggerInterface := providers.ProvideGormLogger(logger)
	gormConfig := providers.ProvideGormConfig(loggerInterface)
	datasource := providers.ProvideDatasource(datasourceContext, gormConfig)
	transactionHandler := providers.ProvideTransactionHandler(datasource)
	principalManager := providers.ProvidePrincipalManager(transactionHandler, passwordManager)
	tokenManager := providers.ProvideTokenManager(cfg)
	authenticationService := providers.ProvideAuthenticationService(passwordManager, principalManager, tokenManager)
	authorizationService := providers.ProvideAuthorizationService(principalManager, tokenManager)
	bankService := providers.ProvideBankService(transactionHandler)
	apiServer := providers.ProvideBankApiFacade(authenticationService, authorizationService, bankService)
	grpcServer := server.NewGRPCServer(cfg, apiServer)
	apiHTTPServer := providers.ProvideBankApiHttpFacade(authenticationService, authorizationService, bankService)
	httpServer := server.NewHTTPServer(cfg, apiHTTPServer)
	app := newApp(logger, grpcServer, httpServer)
	return app, nil
}
