// Code generated by MockGen. DO NOT EDIT.
// Source: ../core/endpoints/rpc/bank_grpc.pb.go
//
// Generated by this command:
//
//	mockgen -package=rpc -destination ../core/endpoints/rpc/mocks.go -source ../core/endpoints/rpc/bank_grpc.pb.go
//

// Package rpc is a generated GoMock package.
package rpc

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// MockApiClient is a mock of ApiClient interface.
type MockApiClient struct {
	ctrl     *gomock.Controller
	recorder *MockApiClientMockRecorder
}

// MockApiClientMockRecorder is the mock recorder for MockApiClient.
type MockApiClientMockRecorder struct {
	mock *MockApiClient
}

// NewMockApiClient creates a new mock instance.
func NewMockApiClient(ctrl *gomock.Controller) *MockApiClient {
	mock := &MockApiClient{ctrl: ctrl}
	mock.recorder = &MockApiClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApiClient) EXPECT() *MockApiClientMockRecorder {
	return m.recorder
}

// CreateAccount mocks base method.
func (m *MockApiClient) CreateAccount(ctx context.Context, in *CreateAccountRequest, opts ...grpc.CallOption) (*CreateAccountResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateAccount", varargs...)
	ret0, _ := ret[0].(*CreateAccountResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAccount indicates an expected call of CreateAccount.
func (mr *MockApiClientMockRecorder) CreateAccount(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccount", reflect.TypeOf((*MockApiClient)(nil).CreateAccount), varargs...)
}

// GetAccount mocks base method.
func (m *MockApiClient) GetAccount(ctx context.Context, in *GetAccountRequest, opts ...grpc.CallOption) (*GetAccountResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAccount", varargs...)
	ret0, _ := ret[0].(*GetAccountResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccount indicates an expected call of GetAccount.
func (mr *MockApiClientMockRecorder) GetAccount(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccount", reflect.TypeOf((*MockApiClient)(nil).GetAccount), varargs...)
}

// GetAccountWithEntries mocks base method.
func (m *MockApiClient) GetAccountWithEntries(ctx context.Context, in *GetAccountRequest, opts ...grpc.CallOption) (*GetAccountWithEntriesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAccountWithEntries", varargs...)
	ret0, _ := ret[0].(*GetAccountWithEntriesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountWithEntries indicates an expected call of GetAccountWithEntries.
func (mr *MockApiClientMockRecorder) GetAccountWithEntries(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountWithEntries", reflect.TypeOf((*MockApiClient)(nil).GetAccountWithEntries), varargs...)
}

// Health mocks base method.
func (m *MockApiClient) Health(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*HealthResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Health", varargs...)
	ret0, _ := ret[0].(*HealthResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Health indicates an expected call of Health.
func (mr *MockApiClientMockRecorder) Health(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Health", reflect.TypeOf((*MockApiClient)(nil).Health), varargs...)
}

// Info mocks base method.
func (m *MockApiClient) Info(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*InfoResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Info", varargs...)
	ret0, _ := ret[0].(*InfoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Info indicates an expected call of Info.
func (mr *MockApiClientMockRecorder) Info(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Info", reflect.TypeOf((*MockApiClient)(nil).Info), varargs...)
}

// Login mocks base method.
func (m *MockApiClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Login", varargs...)
	ret0, _ := ret[0].(*LoginResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockApiClientMockRecorder) Login(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockApiClient)(nil).Login), varargs...)
}

// Transfer mocks base method.
func (m *MockApiClient) Transfer(ctx context.Context, in *TransferRequest, opts ...grpc.CallOption) (*TransferResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Transfer", varargs...)
	ret0, _ := ret[0].(*TransferResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Transfer indicates an expected call of Transfer.
func (mr *MockApiClientMockRecorder) Transfer(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Transfer", reflect.TypeOf((*MockApiClient)(nil).Transfer), varargs...)
}

// MockApiServer is a mock of ApiServer interface.
type MockApiServer struct {
	ctrl     *gomock.Controller
	recorder *MockApiServerMockRecorder
}

// MockApiServerMockRecorder is the mock recorder for MockApiServer.
type MockApiServerMockRecorder struct {
	mock *MockApiServer
}

// NewMockApiServer creates a new mock instance.
func NewMockApiServer(ctrl *gomock.Controller) *MockApiServer {
	mock := &MockApiServer{ctrl: ctrl}
	mock.recorder = &MockApiServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApiServer) EXPECT() *MockApiServerMockRecorder {
	return m.recorder
}

// CreateAccount mocks base method.
func (m *MockApiServer) CreateAccount(arg0 context.Context, arg1 *CreateAccountRequest) (*CreateAccountResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAccount", arg0, arg1)
	ret0, _ := ret[0].(*CreateAccountResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAccount indicates an expected call of CreateAccount.
func (mr *MockApiServerMockRecorder) CreateAccount(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccount", reflect.TypeOf((*MockApiServer)(nil).CreateAccount), arg0, arg1)
}

// GetAccount mocks base method.
func (m *MockApiServer) GetAccount(arg0 context.Context, arg1 *GetAccountRequest) (*GetAccountResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccount", arg0, arg1)
	ret0, _ := ret[0].(*GetAccountResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccount indicates an expected call of GetAccount.
func (mr *MockApiServerMockRecorder) GetAccount(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccount", reflect.TypeOf((*MockApiServer)(nil).GetAccount), arg0, arg1)
}

// GetAccountWithEntries mocks base method.
func (m *MockApiServer) GetAccountWithEntries(arg0 context.Context, arg1 *GetAccountRequest) (*GetAccountWithEntriesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountWithEntries", arg0, arg1)
	ret0, _ := ret[0].(*GetAccountWithEntriesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountWithEntries indicates an expected call of GetAccountWithEntries.
func (mr *MockApiServerMockRecorder) GetAccountWithEntries(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountWithEntries", reflect.TypeOf((*MockApiServer)(nil).GetAccountWithEntries), arg0, arg1)
}

// Health mocks base method.
func (m *MockApiServer) Health(arg0 context.Context, arg1 *emptypb.Empty) (*HealthResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Health", arg0, arg1)
	ret0, _ := ret[0].(*HealthResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Health indicates an expected call of Health.
func (mr *MockApiServerMockRecorder) Health(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Health", reflect.TypeOf((*MockApiServer)(nil).Health), arg0, arg1)
}

// Info mocks base method.
func (m *MockApiServer) Info(arg0 context.Context, arg1 *emptypb.Empty) (*InfoResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Info", arg0, arg1)
	ret0, _ := ret[0].(*InfoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Info indicates an expected call of Info.
func (mr *MockApiServerMockRecorder) Info(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Info", reflect.TypeOf((*MockApiServer)(nil).Info), arg0, arg1)
}

// Login mocks base method.
func (m *MockApiServer) Login(arg0 context.Context, arg1 *LoginRequest) (*LoginResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", arg0, arg1)
	ret0, _ := ret[0].(*LoginResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockApiServerMockRecorder) Login(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockApiServer)(nil).Login), arg0, arg1)
}

// Transfer mocks base method.
func (m *MockApiServer) Transfer(arg0 context.Context, arg1 *TransferRequest) (*TransferResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Transfer", arg0, arg1)
	ret0, _ := ret[0].(*TransferResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Transfer indicates an expected call of Transfer.
func (mr *MockApiServerMockRecorder) Transfer(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Transfer", reflect.TypeOf((*MockApiServer)(nil).Transfer), arg0, arg1)
}

// mustEmbedUnimplementedApiServer mocks base method.
func (m *MockApiServer) mustEmbedUnimplementedApiServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedApiServer")
}

// mustEmbedUnimplementedApiServer indicates an expected call of mustEmbedUnimplementedApiServer.
func (mr *MockApiServerMockRecorder) mustEmbedUnimplementedApiServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedApiServer", reflect.TypeOf((*MockApiServer)(nil).mustEmbedUnimplementedApiServer))
}

// MockUnsafeApiServer is a mock of UnsafeApiServer interface.
type MockUnsafeApiServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeApiServerMockRecorder
}

// MockUnsafeApiServerMockRecorder is the mock recorder for MockUnsafeApiServer.
type MockUnsafeApiServerMockRecorder struct {
	mock *MockUnsafeApiServer
}

// NewMockUnsafeApiServer creates a new mock instance.
func NewMockUnsafeApiServer(ctrl *gomock.Controller) *MockUnsafeApiServer {
	mock := &MockUnsafeApiServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeApiServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeApiServer) EXPECT() *MockUnsafeApiServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedApiServer mocks base method.
func (m *MockUnsafeApiServer) mustEmbedUnimplementedApiServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedApiServer")
}

// mustEmbedUnimplementedApiServer indicates an expected call of mustEmbedUnimplementedApiServer.
func (mr *MockUnsafeApiServerMockRecorder) mustEmbedUnimplementedApiServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedApiServer", reflect.TypeOf((*MockUnsafeApiServer)(nil).mustEmbedUnimplementedApiServer))
}
