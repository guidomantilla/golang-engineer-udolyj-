// Code generated by MockGen. DO NOT EDIT.
// Source: ../core/endpoints/rpc/bank_grpc.pb.go
//
// Generated by this command:
//
//	mockgen -package=rpc -destination ../core/endpoints/rpc/mocks.go -source ../core/endpoints/rpc/bank_grpc.pb.go
//

// Package rpc is a generated GoMock package.
package rpc

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// MockBankApiClient is a mock of BankApiClient interface.
type MockBankApiClient struct {
	ctrl     *gomock.Controller
	recorder *MockBankApiClientMockRecorder
}

// MockBankApiClientMockRecorder is the mock recorder for MockBankApiClient.
type MockBankApiClientMockRecorder struct {
	mock *MockBankApiClient
}

// NewMockBankApiClient creates a new mock instance.
func NewMockBankApiClient(ctrl *gomock.Controller) *MockBankApiClient {
	mock := &MockBankApiClient{ctrl: ctrl}
	mock.recorder = &MockBankApiClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBankApiClient) EXPECT() *MockBankApiClientMockRecorder {
	return m.recorder
}

// GetPrincipal mocks base method.
func (m *MockBankApiClient) GetPrincipal(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Principal, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetPrincipal", varargs...)
	ret0, _ := ret[0].(*Principal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPrincipal indicates an expected call of GetPrincipal.
func (mr *MockBankApiClientMockRecorder) GetPrincipal(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPrincipal", reflect.TypeOf((*MockBankApiClient)(nil).GetPrincipal), varargs...)
}

// Login mocks base method.
func (m *MockBankApiClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Login", varargs...)
	ret0, _ := ret[0].(*LoginResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockBankApiClientMockRecorder) Login(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockBankApiClient)(nil).Login), varargs...)
}

// MockBankApiServer is a mock of BankApiServer interface.
type MockBankApiServer struct {
	ctrl     *gomock.Controller
	recorder *MockBankApiServerMockRecorder
}

// MockBankApiServerMockRecorder is the mock recorder for MockBankApiServer.
type MockBankApiServerMockRecorder struct {
	mock *MockBankApiServer
}

// NewMockBankApiServer creates a new mock instance.
func NewMockBankApiServer(ctrl *gomock.Controller) *MockBankApiServer {
	mock := &MockBankApiServer{ctrl: ctrl}
	mock.recorder = &MockBankApiServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBankApiServer) EXPECT() *MockBankApiServerMockRecorder {
	return m.recorder
}

// GetPrincipal mocks base method.
func (m *MockBankApiServer) GetPrincipal(arg0 context.Context, arg1 *emptypb.Empty) (*Principal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPrincipal", arg0, arg1)
	ret0, _ := ret[0].(*Principal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPrincipal indicates an expected call of GetPrincipal.
func (mr *MockBankApiServerMockRecorder) GetPrincipal(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPrincipal", reflect.TypeOf((*MockBankApiServer)(nil).GetPrincipal), arg0, arg1)
}

// Login mocks base method.
func (m *MockBankApiServer) Login(arg0 context.Context, arg1 *LoginRequest) (*LoginResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", arg0, arg1)
	ret0, _ := ret[0].(*LoginResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockBankApiServerMockRecorder) Login(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockBankApiServer)(nil).Login), arg0, arg1)
}

// mustEmbedUnimplementedBankApiServer mocks base method.
func (m *MockBankApiServer) mustEmbedUnimplementedBankApiServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedBankApiServer")
}

// mustEmbedUnimplementedBankApiServer indicates an expected call of mustEmbedUnimplementedBankApiServer.
func (mr *MockBankApiServerMockRecorder) mustEmbedUnimplementedBankApiServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedBankApiServer", reflect.TypeOf((*MockBankApiServer)(nil).mustEmbedUnimplementedBankApiServer))
}

// MockUnsafeBankApiServer is a mock of UnsafeBankApiServer interface.
type MockUnsafeBankApiServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeBankApiServerMockRecorder
}

// MockUnsafeBankApiServerMockRecorder is the mock recorder for MockUnsafeBankApiServer.
type MockUnsafeBankApiServerMockRecorder struct {
	mock *MockUnsafeBankApiServer
}

// NewMockUnsafeBankApiServer creates a new mock instance.
func NewMockUnsafeBankApiServer(ctrl *gomock.Controller) *MockUnsafeBankApiServer {
	mock := &MockUnsafeBankApiServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeBankApiServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeBankApiServer) EXPECT() *MockUnsafeBankApiServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedBankApiServer mocks base method.
func (m *MockUnsafeBankApiServer) mustEmbedUnimplementedBankApiServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedBankApiServer")
}

// mustEmbedUnimplementedBankApiServer indicates an expected call of mustEmbedUnimplementedBankApiServer.
func (mr *MockUnsafeBankApiServerMockRecorder) mustEmbedUnimplementedBankApiServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedBankApiServer", reflect.TypeOf((*MockUnsafeBankApiServer)(nil).mustEmbedUnimplementedBankApiServer))
}
