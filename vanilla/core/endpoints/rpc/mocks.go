// Code generated by MockGen. DO NOT EDIT.
// Source: ../core/endpoints/rpc/bank_grpc.pb.go
//
// Generated by this command:
//
//	mockgen -package=rpc -destination ../core/endpoints/rpc/mocks.go -source ../core/endpoints/rpc/bank_grpc.pb.go
//

// Package rpc is a generated GoMock package.
package rpc

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// MockBankApiClient is a mock of BankApiClient interface.
type MockBankApiClient struct {
	ctrl     *gomock.Controller
	recorder *MockBankApiClientMockRecorder
}

// MockBankApiClientMockRecorder is the mock recorder for MockBankApiClient.
type MockBankApiClientMockRecorder struct {
	mock *MockBankApiClient
}

// NewMockBankApiClient creates a new mock instance.
func NewMockBankApiClient(ctrl *gomock.Controller) *MockBankApiClient {
	mock := &MockBankApiClient{ctrl: ctrl}
	mock.recorder = &MockBankApiClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBankApiClient) EXPECT() *MockBankApiClientMockRecorder {
	return m.recorder
}

// CreateAccount mocks base method.
func (m *MockBankApiClient) CreateAccount(ctx context.Context, in *CreateAccountRequest, opts ...grpc.CallOption) (*CreateAccountResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateAccount", varargs...)
	ret0, _ := ret[0].(*CreateAccountResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAccount indicates an expected call of CreateAccount.
func (mr *MockBankApiClientMockRecorder) CreateAccount(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccount", reflect.TypeOf((*MockBankApiClient)(nil).CreateAccount), varargs...)
}

// GetAccount mocks base method.
func (m *MockBankApiClient) GetAccount(ctx context.Context, in *GetAccountRequest, opts ...grpc.CallOption) (*GetAccountResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAccount", varargs...)
	ret0, _ := ret[0].(*GetAccountResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccount indicates an expected call of GetAccount.
func (mr *MockBankApiClientMockRecorder) GetAccount(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccount", reflect.TypeOf((*MockBankApiClient)(nil).GetAccount), varargs...)
}

// GetAccountWithEntries mocks base method.
func (m *MockBankApiClient) GetAccountWithEntries(ctx context.Context, in *GetAccountRequest, opts ...grpc.CallOption) (*GetAccountWithEntriesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAccountWithEntries", varargs...)
	ret0, _ := ret[0].(*GetAccountWithEntriesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountWithEntries indicates an expected call of GetAccountWithEntries.
func (mr *MockBankApiClientMockRecorder) GetAccountWithEntries(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountWithEntries", reflect.TypeOf((*MockBankApiClient)(nil).GetAccountWithEntries), varargs...)
}

// Health mocks base method.
func (m *MockBankApiClient) Health(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*HealthResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Health", varargs...)
	ret0, _ := ret[0].(*HealthResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Health indicates an expected call of Health.
func (mr *MockBankApiClientMockRecorder) Health(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Health", reflect.TypeOf((*MockBankApiClient)(nil).Health), varargs...)
}

// Info mocks base method.
func (m *MockBankApiClient) Info(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*InfoResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Info", varargs...)
	ret0, _ := ret[0].(*InfoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Info indicates an expected call of Info.
func (mr *MockBankApiClientMockRecorder) Info(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Info", reflect.TypeOf((*MockBankApiClient)(nil).Info), varargs...)
}

// Login mocks base method.
func (m *MockBankApiClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Login", varargs...)
	ret0, _ := ret[0].(*LoginResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockBankApiClientMockRecorder) Login(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockBankApiClient)(nil).Login), varargs...)
}

// Transfer mocks base method.
func (m *MockBankApiClient) Transfer(ctx context.Context, in *TransferRequest, opts ...grpc.CallOption) (*TransferResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Transfer", varargs...)
	ret0, _ := ret[0].(*TransferResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Transfer indicates an expected call of Transfer.
func (mr *MockBankApiClientMockRecorder) Transfer(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Transfer", reflect.TypeOf((*MockBankApiClient)(nil).Transfer), varargs...)
}

// MockBankApiServer is a mock of BankApiServer interface.
type MockBankApiServer struct {
	ctrl     *gomock.Controller
	recorder *MockBankApiServerMockRecorder
}

// MockBankApiServerMockRecorder is the mock recorder for MockBankApiServer.
type MockBankApiServerMockRecorder struct {
	mock *MockBankApiServer
}

// NewMockBankApiServer creates a new mock instance.
func NewMockBankApiServer(ctrl *gomock.Controller) *MockBankApiServer {
	mock := &MockBankApiServer{ctrl: ctrl}
	mock.recorder = &MockBankApiServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBankApiServer) EXPECT() *MockBankApiServerMockRecorder {
	return m.recorder
}

// CreateAccount mocks base method.
func (m *MockBankApiServer) CreateAccount(arg0 context.Context, arg1 *CreateAccountRequest) (*CreateAccountResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAccount", arg0, arg1)
	ret0, _ := ret[0].(*CreateAccountResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAccount indicates an expected call of CreateAccount.
func (mr *MockBankApiServerMockRecorder) CreateAccount(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccount", reflect.TypeOf((*MockBankApiServer)(nil).CreateAccount), arg0, arg1)
}

// GetAccount mocks base method.
func (m *MockBankApiServer) GetAccount(arg0 context.Context, arg1 *GetAccountRequest) (*GetAccountResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccount", arg0, arg1)
	ret0, _ := ret[0].(*GetAccountResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccount indicates an expected call of GetAccount.
func (mr *MockBankApiServerMockRecorder) GetAccount(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccount", reflect.TypeOf((*MockBankApiServer)(nil).GetAccount), arg0, arg1)
}

// GetAccountWithEntries mocks base method.
func (m *MockBankApiServer) GetAccountWithEntries(arg0 context.Context, arg1 *GetAccountRequest) (*GetAccountWithEntriesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountWithEntries", arg0, arg1)
	ret0, _ := ret[0].(*GetAccountWithEntriesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountWithEntries indicates an expected call of GetAccountWithEntries.
func (mr *MockBankApiServerMockRecorder) GetAccountWithEntries(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountWithEntries", reflect.TypeOf((*MockBankApiServer)(nil).GetAccountWithEntries), arg0, arg1)
}

// Health mocks base method.
func (m *MockBankApiServer) Health(arg0 context.Context, arg1 *emptypb.Empty) (*HealthResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Health", arg0, arg1)
	ret0, _ := ret[0].(*HealthResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Health indicates an expected call of Health.
func (mr *MockBankApiServerMockRecorder) Health(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Health", reflect.TypeOf((*MockBankApiServer)(nil).Health), arg0, arg1)
}

// Info mocks base method.
func (m *MockBankApiServer) Info(arg0 context.Context, arg1 *emptypb.Empty) (*InfoResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Info", arg0, arg1)
	ret0, _ := ret[0].(*InfoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Info indicates an expected call of Info.
func (mr *MockBankApiServerMockRecorder) Info(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Info", reflect.TypeOf((*MockBankApiServer)(nil).Info), arg0, arg1)
}

// Login mocks base method.
func (m *MockBankApiServer) Login(arg0 context.Context, arg1 *LoginRequest) (*LoginResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", arg0, arg1)
	ret0, _ := ret[0].(*LoginResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockBankApiServerMockRecorder) Login(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockBankApiServer)(nil).Login), arg0, arg1)
}

// Transfer mocks base method.
func (m *MockBankApiServer) Transfer(arg0 context.Context, arg1 *TransferRequest) (*TransferResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Transfer", arg0, arg1)
	ret0, _ := ret[0].(*TransferResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Transfer indicates an expected call of Transfer.
func (mr *MockBankApiServerMockRecorder) Transfer(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Transfer", reflect.TypeOf((*MockBankApiServer)(nil).Transfer), arg0, arg1)
}

// mustEmbedUnimplementedBankApiServer mocks base method.
func (m *MockBankApiServer) mustEmbedUnimplementedBankApiServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedBankApiServer")
}

// mustEmbedUnimplementedBankApiServer indicates an expected call of mustEmbedUnimplementedBankApiServer.
func (mr *MockBankApiServerMockRecorder) mustEmbedUnimplementedBankApiServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedBankApiServer", reflect.TypeOf((*MockBankApiServer)(nil).mustEmbedUnimplementedBankApiServer))
}

// MockUnsafeBankApiServer is a mock of UnsafeBankApiServer interface.
type MockUnsafeBankApiServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeBankApiServerMockRecorder
}

// MockUnsafeBankApiServerMockRecorder is the mock recorder for MockUnsafeBankApiServer.
type MockUnsafeBankApiServerMockRecorder struct {
	mock *MockUnsafeBankApiServer
}

// NewMockUnsafeBankApiServer creates a new mock instance.
func NewMockUnsafeBankApiServer(ctrl *gomock.Controller) *MockUnsafeBankApiServer {
	mock := &MockUnsafeBankApiServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeBankApiServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeBankApiServer) EXPECT() *MockUnsafeBankApiServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedBankApiServer mocks base method.
func (m *MockUnsafeBankApiServer) mustEmbedUnimplementedBankApiServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedBankApiServer")
}

// mustEmbedUnimplementedBankApiServer indicates an expected call of mustEmbedUnimplementedBankApiServer.
func (mr *MockUnsafeBankApiServerMockRecorder) mustEmbedUnimplementedBankApiServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedBankApiServer", reflect.TypeOf((*MockUnsafeBankApiServer)(nil).mustEmbedUnimplementedBankApiServer))
}
